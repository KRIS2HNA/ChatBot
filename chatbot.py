# -*- coding: utf-8 -*-
"""ChatBot.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Nujrr28d-KnBY7vAmf8B6ZJTdfJ596e2
"""

!pip install transformers

from transformers import AutoModelForCausalLM, AutoTokenizer
import torch


#load pre-trained model
tokenizer = AutoTokenizer.from_pretrained("microsoft/DialoGPT-medium")
model = AutoModelForCausalLM.from_pretrained("microsoft/DialoGPT-medium")

# Chat history ID tracking
chat_history_ids = None
print("ðŸ¤– ChatBot is ready! Type 'quit' to stop.\n")

# Infinite chat loop
for step in range(100):
    user_input = input("You: ")

    if user_input.lower() == 'quit':
        print("Bot: Goodbye! ðŸ‘‹")
        break

    # Encode user input and add end of string token
    new_input_ids = tokenizer.encode(user_input + tokenizer.eos_token, return_tensors='pt')

    # Append to chat history or start new conversation
    bot_input_ids = torch.cat([chat_history_ids, new_input_ids], dim=-1) if step > 0 else new_input_ids

    # Generate response
    chat_history_ids = model.generate(bot_input_ids, max_length=1000, pad_token_id=tokenizer.eos_token_id)

    # Decode and print the response
    bot_response = tokenizer.decode(chat_history_ids[:, bot_input_ids.shape[-1]:][0], skip_special_tokens=True)
    print("Bot:", bot_response)

import streamlit as st
from transformers import AutoModelForCausalLM, AutoTokenizer
import torch

# Set Streamlit page config
st.set_page_config(page_title="ðŸ¤– Chat with AI - DialoGPT", layout="centered")

# Load DialoGPT model and tokenizer (cached)
@st.cache_resource
def load_model():
    tokenizer = AutoTokenizer.from_pretrained("microsoft/DialoGPT-medium")
    model = AutoModelForCausalLM.from_pretrained("microsoft/DialoGPT-medium")
    return tokenizer, model

tokenizer, model = load_model()

# Initialize chat history in session state
if "chat_history_ids" not in st.session_state:
    st.session_state.chat_history_ids = None
if "past_inputs" not in st.session_state:
    st.session_state.past_inputs = []
if "past_responses" not in st.session_state:
    st.session_state.past_responses = []

st.title("ðŸ¤– Chat with DialoGPT")
st.markdown("Talk to an AI chatbot powered by Hugging Face's DialoGPT-medium!")

# User input
user_input = st.text_input("You:", placeholder="Ask me anything...")

if user_input:
    # Encode user input
    new_input_ids = tokenizer.encode(user_input + tokenizer.eos_token, return_tensors='pt')

    # Append input to history or start new conversation
    bot_input_ids = torch.cat([st.session_state.chat_history_ids, new_input_ids], dim=-1) if st.session_state.chat_history_ids is not None else new_input_ids

    # Generate a response
    st.session_state.chat_history_ids = model.generate(
        bot_input_ids, max_length=1000,
        pad_token_id=tokenizer.eos_token_id,
        no_repeat_ngram_size=3,
        do_sample=True,
        top_k=100,
        top_p=0.7,
        temperature=0.8
    )

    # Decode response
    response = tokenizer.decode(
        st.session_state.chat_history_ids[:, bot_input_ids.shape[-1]:][0],
        skip_special_tokens=True
    )

    # Save to session
    st.session_state.past_inputs.append(user_input)
    st.session_state.past_responses.append(response)

# Show chat history
if st.session_state.past_inputs:
    for user_msg, bot_msg in zip(reversed(st.session_state.past_inputs), reversed(st.session_state.past_responses)):
        st.markdown(f"**ðŸ§‘ You:** {user_msg}")
        st.markdown(f"**ðŸ¤– Bot:** {bot_msg}")

!pip install streamlit

from pyngrok import ngrok

# Kill previous tunnels (if any)
ngrok.kill()

# Create tunnel for streamlit
public_url = ngrok.connect(port=8501)
print("ðŸ‘‰ Streamlit app link:", public_url)

!pip install pyngrok

!streamlit run app.py & npx localtunnel --port 8501